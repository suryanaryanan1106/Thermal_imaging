from google.colab import drive
import shutil
import os
import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator
import matplotlib.pyplot as plt
from tensorflow.keras.callbacks import EarlyStopping, ReduceLROnPlateau
drive.mount('/content/drive')
train_dir = '/content/drive/MyDrive/Thermal_leaf_dataset/train'
validation_dir = '/content/drive/MyDrive/Thermal_leaf_dataset_validate/thermal images UL'
!ls /content/drive/MyDrive/Thermal_leaf_dataset/train
!ls /content/drive/MyDrive/Thermal_leaf_dataset_validate
!pip install -q efficientnet
import efficientnet.tfkeras as efn
train_datagen = ImageDataGenerator(
    rescale=1./255,
    rotation_range=20,
    width_shift_range=0.2,
    height_shift_range=0.2,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True,
    fill_mode='nearest'
)

validation_datagen = ImageDataGenerator(rescale=1./255)

train_generator = train_datagen.flow_from_directory(
    train_dir,  # Path to the training dataset folder
    target_size=(224, 224),
    batch_size=32,
    class_mode='categorical'
)

validation_generator = validation_datagen.flow_from_directory(
    validation_dir,  # Path to the validation dataset folder
    target_size=(224, 224),
    batch_size=32,
    class_mode='categorical'
)
print("Classes:", train_generator.class_indices)
print("Number of images in training set:", train_generator.samples)
print("Number of images in validation set:", validation_generator.samples)
for cls, idx in train_generator.class_indices.items():
    print(f"Class {cls} in training set: {len(os.listdir(os.path.join(train_dir, cls)))} images")
for cls, idx in validation_generator.class_indices.items():
    print(f"Class {cls} in validation set: {len(os.listdir(os.path.join(validation_dir, cls)))} images")
base_model = efn.EfficientNetB0(weights='imagenet', include_top=False, input_shape=(224, 224, 3))

model = tf.keras.Sequential([
    base_model,
    tf.keras.layers.GlobalAveragePooling2D(),
    tf.keras.layers.Dense(64, activation='relu'),
  #  tf.keras.layers.Dropout(0.5),
    tf.keras.layers.Dense(train_generator.num_classes, activation='softmax')
])
model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

# Callbacks
#early_stopping = EarlyStopping(monitor='val_loss', patience=5, restore_best_weights=True)
reduce_lr = ReduceLROnPlateau(monitor='val_loss', factor=0.2, patience=3, min_lr=1e-6)
history = model.fit(
    train_generator,
    epochs=40,
    validation_data=validation_generator,
    callbacks=[reduce_lr]
)
loss, accuracy = model.evaluate(train_generator)
print(f'Train_accuracy: {accuracy * 100:.2f}%')
model.save('efficientnet_thermal_model.h5')
plt.figure(figsize=(12, 4))
plt.subplot(1, 2, 1)
plt.plot(history.history['accuracy'], label='Train Accuracy')
plt.plot(history.history['val_accuracy'], label='Validation Accuracy')
plt.title('Model accuracy')
plt.ylabel('Accuracy')
plt.xlabel('Epoch')
plt.legend(loc='upper left')
plt.subplot(1, 2, 2)
plt.plot(history.history['loss'], label='Train Loss')
plt.plot(history.history['val_loss'], label='Validation Loss')
plt.title('Model loss')
plt.ylabel('Loss')
plt.xlabel('Epoch')
plt.legend(loc='upper left')
plt.show()
